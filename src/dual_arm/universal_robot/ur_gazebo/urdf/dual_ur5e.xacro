<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg robot_model)_robot">
  <!--
    This is a top-level xacro instantiating the Gazebo-specific version of the
    'ur_robot' macro (ie: 'ur_robot_gazebo') and passing it values for all its
    required arguments.

    This file should be considered the Gazebo-specific variant of the file
    with the same name in the ur_description package. It accepts the same
    arguments, but instead of configuring everything for a real robot, will
    generate a Gazebo-compatible URDF with a ros_control hardware_interface
    attached to it.

    Only use this top-level xacro if you plan on spawning the robot in Gazebo
    'by itself', without any gripper or any other geometry attached.

    If you need to attach an end-effector, camera or need to integrate the
    robot into a larger workcell and want to spawn that as a single entity in
    Gazebo, DO NOT EDIT THIS FILE.

    Instead: create a new top-level xacro, give it a proper name, include the
    required '.xacro' files, instantiate the models (ie: call the macros) and
    connect everything by adding the appropriate joints.
  -->

  <!--
    Import main macro.

    NOTE: this imports the Gazebo-wrapper main macro, NOT the regular
          xacro macro (which is hosted by ur_description).
  -->
  <xacro:include filename="$(find ur_gazebo)/urdf/ur_macro.xacro"/>
  <xacro:include filename="$(find ur_gazebo)/urdf/inc/body_macro.xacro"/>
  <xacro:include filename="$(find ur_gazebo)/urdf/inc/dh_pgi_macro.xacro"/>
  <xacro:include filename="$(find ur_gazebo)/urdf/inc/tool_camera_macro.xacro"/>

  <!--Declare arguments -->
  <xacro:arg name="joint_limit_params" default="$(find ur_description)/config/ur5e/joint_limits.yaml"/>
  <xacro:arg name="kinematics_params" default="$(find ur_description)/config/ur5e/default_kinematics.yaml"/>
  <xacro:arg name="physical_params" default="$(find ur_description)/config/ur5e/physical_parameters.yaml"/>
  <xacro:arg name="visual_params" default="$(find ur_description)/config/ur5e/visual_parameters.yaml"/>
  <!--
    legal values:
      - hardware_interface/PositionJointInterface
      - hardware_interface/VelocityJointInterface
      - hardware_interface/EffortJointInterface

    NOTE: this value must correspond to the controller configured in the
          controller .yaml files in the 'config' directory.
  -->
  <xacro:arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
  <xacro:arg name="safety_limits" default="false"/>
  <xacro:arg name="safety_pos_margin" default="0.15"/>
  <xacro:arg name="safety_k_position" default="20"/>

  <!-- Instantiate the Gazebo robot and pass it all the required arguments. -->
  <!-- left_ur5e_arm -->
  <xacro:ur_robot_gazebo
    prefix="l_"
    joint_limits_parameters_file="$(arg joint_limit_params)"
    kinematics_parameters_file="$(arg kinematics_params)"
    physical_parameters_file="$(arg physical_params)"
    visual_parameters_file="$(arg visual_params)"
    transmission_hw_interface="$(arg transmission_hw_interface)"
    safety_limits="$(arg safety_limits)"
    safety_pos_margin="$(arg safety_pos_margin)"
    safety_k_position="$(arg safety_k_position)"
  />
  <!-- right_ur5e_arm  -->
  <xacro:ur_robot_gazebo
  prefix="r_"
  joint_limits_parameters_file="$(arg joint_limit_params)"
  kinematics_parameters_file="$(arg kinematics_params)"
  physical_parameters_file="$(arg physical_params)"
  visual_parameters_file="$(arg visual_params)"
  transmission_hw_interface="$(arg transmission_hw_interface)"
  safety_limits="$(arg safety_limits)"
  safety_pos_margin="$(arg safety_pos_margin)"
  safety_k_position="$(arg safety_k_position)"
/>
  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->

  <link name="world"/>

  <!-- mount body_urdf to world-->
  <xacro:body />
  <joint name="world_joint" type="fixed">
    <parent link="world"/>
    <child link="body_base_link"/>
    <origin xyz="0 0 0.5" rpy="0 0 0"/>
  </joint>

  <!-- mount left_arm to dbody -->
  <joint name="body_l_joint" type="fixed">
    <parent link="body_left_base_link"/>
    <child link="l_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- mount right_arm to body -->
  <joint name="body_r_joint" type="fixed">
    <parent link="body_right_base_link"/>
    <child link="r_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>


  <!-- mount left_gripper to left_arm -->
  <!-- left_gripper  -->
  <xacro:dh_pgi140
    prefix="l_"
    />
  <joint name="left_gripper_joint" type="fixed">
    <parent link="l_tool0"/>
    <child link="l_dh_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- mount right_gripper to left_arm -->
  <!-- rightgripper  -->
  <xacro:dh_pgi140
  prefix="r_"
  />
  <joint name="right_gripper_joint" type="fixed">
    <parent link="r_tool0"/>
    <child link="r_dh_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- mount left camera_load to gripper -->
  <xacro:tool_camera
  prefix="l_"
  />
  <joint name="left_tool_camera_joint" type="fixed">
    <parent link="l_dh_load1_link"/>
    <child link="l_tool_base_link"/>
    <origin xyz="0 0 0" rpy="3.141592653 0 0"/>
  </joint>

  <!-- mount right camera_load to gripper -->
  <xacro:tool_camera
  prefix="r_"
  />
  <joint name="right_tool_camera_joint" type="fixed">
    <parent link="r_dh_load1_link"/>
    <child link="r_tool_base_link"/>
    <origin xyz="0 0 0" rpy="3.141592653 0 0"/>
  </joint>


  <!-- <link name="tool0_controller"/>
  <joint name="tool_controller_fake_joint" type="fixed">
    <parent link="tool0"/>
    <child link="tool0_controller"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint> -->
  
  <!--
    Inject Gazebo ROS Control plugin, which allows us to use ros_control
    controllers to control the virtual robot hw.
  -->
  <gazebo>
    <plugin name="ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/gazebo_ros_control</robotNamespace>
     
    </plugin>
  </gazebo>
</robot>
