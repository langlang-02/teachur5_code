<?xml version="1.0"?>
<launch>
  <arg name="robot_model" default="dual_ur5e" doc="Type/series of used UR robot (ur3, ur3e, ur5, ur5e, ur10, ur10e, ur16e, ur20)" />
  <!--Robot description and related parameter files -->
  <arg name="joint_limit_params" default="$(find ur_description)/config/ur5e/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find ur_description)/config/ur5e/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find ur_description)/config/ur5e/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find ur_description)/config/ur5e/visual_parameters.yaml"/>
  
  <!--Common parameters -->
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" doc="The hardware_interface to expose for each joint in the simulated robot (one of: [PositionJointInterface, VelocityJointInterface, EffortJointInterface])"/>
  <arg name="safety_limits" default="false" doc="If True, enable the safety limits controller"/>
  <arg name="safety_pos_margin" default="0.15" doc="The lower/upper limits in the safety controller" />
  <arg name="safety_k_position" default="20" doc="Used to set k position in the safety controller" />

  <!-- Controller configuration -->
  <arg name="dual_controller_config_file" default="$(find ur_gazebo)/config/dual_ur5e_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="dual_controllers" default="joint_state_controller l_pos_joint_traj_controller r_pos_joint_traj_controller l_gripper r_gripper" doc="Controllers that are activated by default."/>
  <!-- <arg name="dual_stopped_controllers" default="l_joint_group_eff_controller r_joint_group_eff_controller" doc="Controllers that are initally loaded, but not started."/> -->
  <arg name="dual_stopped_controllers" default="" doc=""/>

  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" default="500" doc="Rate at which robot_state_publisher should publish transforms."/>

  <!-- Gazebo parameters -->
  <arg name="paused" default="false" doc="Starts Gazebo in paused mode" />
  <arg name="gui" default="true" doc="Starts Gazebo gui" />
  <!-- Gazebo parameters -->
  <arg name="gazebo_model_name" default="robot" doc="The name to give to the model in Gazebo (after spawning it)." />
  <arg name="gazebo_world" default="worlds/empty.world" doc="The '.world' file to load in Gazebo." />
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
  <arg name="spawn_z" default="0.1" doc="At which height the model should be spawned. NOTE: lower values will cause the robot to collide with the ground plane." />
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

  <!-- robot_model:=$(arg robot_model) -->
  <!-- load dual_robot URDF  -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find ur_gazebo)/urdf/dual_ur5e.xacro'
    robot_model:=$(arg robot_model)
    joint_limit_params:=$(arg joint_limit_params)
    kinematics_params:=$(arg kinematics_params)
    physical_params:=$(arg physical_params)
    visual_params:=$(arg visual_params)
    transmission_hw_interface:=$(arg transmission_hw_interface)
    safety_limits:=$(arg safety_limits)
    safety_pos_margin:=$(arg safety_pos_margin)
    safety_k_position:=$(arg safety_k_position)"
    />

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
          <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
          <param name="tf_prefix" value="" />
          <!-- NOTE !!!!!!!!!! -->
          <remap from="/joint_states" to="gazebo_ros_control/joint_states"/>
          
  </node>

  <!-- load dual robot controllers -->
  <group ns="gazebo_ros_control"> 
      <rosparam file="$(arg dual_controller_config_file)" command="load"/>
      <!-- Load and start the controllers listed in the 'controllers' arg. -->
      <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
        args="$(arg dual_controllers)" output="screen" respawn="false" />
      <!-- Load other controllers, but do not start them -->
      <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
        args="--stopped $(arg dual_stopped_controllers)" output="screen" respawn="false" />
  </group>

  <!-- Start Gazebo and load the empty world if requested to do so -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Spawn the model loaded earlier in the simulation just started -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -z $(arg spawn_z)"
    output="screen" respawn="false" />

    <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find dual_ur5e_driver)/config/view_robot.rviz" required="true" /> -->
</launch>
