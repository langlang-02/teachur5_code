<?xml version="1.0"?>
<launch>

  <!-- GDB functionality -->
  <arg name="debug" default="false" doc="If set to true, will start the driver inside gdb" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <arg name="left_use_tool_communication"
    doc="On e-Series robots tool communication can be enabled with this argument" />
  <arg name="right_use_tool_communication"
    doc="On e-Series robots tool communication can be enabled with this argument" />

  <arg name="dual_arm_flag" default="false" />

  <!-- right arm -->
  <arg name="right_robot_ip" doc="IP address by which the robot can be reached." />
  <arg name="right_reverse_ip" default=""
    doc="IP of the driver, if set to empty it will detect it automatically." />
  <arg name="right_reverse_port" default="50005"
    doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller." />
  <arg name="right_script_sender_port" default="50006"
    doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately." />
  <arg name="right_trajectory_port" default="50007"
    doc="Port that will be opened by the driver to allow trajectory forwarding." />
  <arg name="right_script_command_port" default="50008" />
  <arg name="right_tf_prefix" default="" doc="tf_prefix used for the robot." />
  <arg name="right_controller_config_file"
    doc="Config file used for defining the ROS-Control controllers." />
  <arg name="right_robot_description_file" doc="Robot description launch file." />

  <!-- left arm -->
  <arg name="left_robot_ip" doc="IP address by which the robot can be reached." />
  <arg name="left_reverse_ip" default=""
    doc="IP of the driver, if set to empty it will detect it automatically." />
  <arg name="left_reverse_port" default="50001"
    doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller." />
  <arg name="left_script_sender_port" default="50002"
    doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately." />
  <arg name="left_trajectory_port" default="50003"
    doc="Port that will be opened by the driver to allow trajectory forwarding." />
  <arg name="left_script_command_port" default="50004" />
  <arg name="left_tf_prefix" default="" doc="tf_prefix used for the robot." />
  <arg name="left_controller_config_file"
    doc="Config file used for defining the ROS-Control controllers." />
  <arg name="left_robot_description_file" doc="Robot description launch file." />

  <arg name="right_kinematics_config"
    doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description. Pass the same config file that is passed to the robot_description." />
  <arg name="left_kinematics_config"
    doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description. Pass the same config file that is passed to the robot_description." />

  <arg name="controllers"
    default="joint_state_controller scaled_pos_joint_traj_controller force_torque_sensor_controller robot_status_controller" />
  <arg name="stopped_controllers"
    default="joint_group_vel_controller forward_joint_traj_controller forward_cartesian_traj_controller" />
  <arg name="urscript_file" default="$(find ur_client_library)/resources/external_control.urscript"
    doc="Path to URScript that will be sent to the robot and that forms the main control program." />
  <arg name="rtde_output_recipe_file"
    default="$(find ur_robot_driver)/resources/rtde_output_recipe.txt"
    doc="Recipe file used for the RTDE-outputs. Only change this if you know what you're doing." />
  <arg name="rtde_input_recipe_file"
    default="$(find ur_robot_driver)/resources/rtde_input_recipe.txt"
    doc="Recipe file used for the RTDE-inputs. Only change this if you know what you're doing." />

  <arg name="left_tool_voltage" default="0"
    doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true." />
  <arg name="left_tool_parity" default="0"
    doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="left_tool_baud_rate" default="115200"
    doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="left_tool_stop_bits" default="1"
    doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="left_tool_rx_idle_chars" default="1.5"
    doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="left_tool_tx_idle_chars" default="3.5"
    doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="left_tool_device_name" default="/tmp/ttyUR"
    doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true." />

  <arg name="right_tool_voltage" default="0"
    doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true." />
  <arg name="right_tool_parity" default="0"
    doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="right_tool_baud_rate" default="115200"
    doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="right_tool_stop_bits" default="1"
    doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="right_tool_rx_idle_chars" default="1.5"
    doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="right_tool_tx_idle_chars" default="3.5"
    doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true." />
  <arg name="right_tool_device_name" default="/tmp/ttyUR"
    doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true." />

  <arg name="tool_tcp_port" default="54321"
    doc="Port on which the robot controller publishes the tool comm interface. Only used, when `use_tool_communication` is set to true." />
  <arg name="headless_mode" default="false"
    doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot." />
  <arg name="servoj_gain" default="2000"
    doc="Specify gain for servoing to position in joint space. A higher gain can sharpen the trajectory." />
  <arg name="servoj_lookahead_time" default="0.03"
    doc="Specify lookahead time for servoing to position in joint space. A longer lookahead time can smooth the trajectory." />

  <!-- right robot model -->
  <include ns="right_robot" file="$(arg right_robot_description_file)">
    <arg name="kinematics_params" value="$(arg right_kinematics_config)" />
  </include>
  <!-- Load hardware interface -->
  <node ns="right_robot" name="ur_hardware_interface" pkg="ur_robot_driver"
    type="ur_robot_driver_node"
    output="screen" launch-prefix="$(arg launch_prefix)" required="true">
    <param name="robot_ip" type="str" value="$(arg right_robot_ip)" />
    <param name="reverse_ip" value="$(arg right_reverse_ip)" />
    <param name="reverse_port" type="int" value="$(arg right_reverse_port)" />
    <param name="script_sender_port" type="int" value="$(arg right_script_sender_port)" />
    <param name="trajectory_port" value="$(arg right_trajectory_port)" />
    <param name="script_command_port" value="$(arg right_script_command_port)" />

    <rosparam command="load" file="$(arg right_kinematics_config)" />
    <param name="script_file" value="$(arg urscript_file)" />
    <param name="output_recipe_file" value="$(arg rtde_output_recipe_file)" />
    <param name="input_recipe_file" value="$(arg rtde_input_recipe_file)" />
    <param name="headless_mode" value="$(arg headless_mode)" />
    <param name="tf_prefix" value="$(arg right_tf_prefix)" />
    <param name="use_tool_communication" value="$(arg right_use_tool_communication)" />
    <!--<param
    name="reverse_port" type="int" value="$(arg right_reverse_port)" />-->
    <param name="tool_voltage" value="$(arg right_tool_voltage)" />
    <param name="tool_parity" value="$(arg right_tool_parity)" />
    <param name="tool_baud_rate" value="$(arg right_tool_baud_rate)" />
    <param name="tool_stop_bits" value="$(arg right_tool_stop_bits)" />
    <param name="tool_rx_idle_chars" value="$(arg right_tool_rx_idle_chars)" />
    <param name="tool_tx_idle_chars" value="$(arg right_tool_tx_idle_chars)" />
    <param name="servoj_gain" value="$(arg servoj_gain)" />
    <param name="servoj_lookahead_time" value="$(arg servoj_lookahead_time)" />


    <!-- 将话题转移到joint_states -->
    <remap from="/right_robot/joint_states" to="/joint_states" />
    <!-- 将ur5e的力矩话题转移至/left_robot/wrench -->
    <remap from="/wrench" to="/right_robot/wrench" />
  </node>

  <!-- Starts socat to bridge the robot's tool communication interface to a local tty device -->
  <node if="$(arg right_use_tool_communication)" name="right_ur_tool_communication_bridge"
    pkg="ur_robot_driver"
    type="tool_communication" respawn="false" output="screen">
    <param name="robot_ip" value="$(arg right_robot_ip)" />
    <param name="reverse_ip" value="$(arg right_reverse_ip)" />
    <param name="reverse_port" type="int" value="$(arg right_reverse_port)" />
    <param name="script_sender_port" type="int" value="$(arg right_script_sender_port)" />
    <param name="device_name" value="$(arg right_tool_device_name)" />
    <param name="tcp_port" value="$(arg tool_tcp_port)" />
  </node>
  <!-- Load controller settings -->
  <rosparam file="$(arg right_controller_config_file)" command="load" />

  <!-- Load hardware interface -->
  <group if="$(arg dual_arm_flag)">
    <!-- right robot model -->
    <include ns="left_robot" file="$(arg left_robot_description_file)">
      <arg name="kinematics_params" value="$(arg left_kinematics_config)" />
    </include>
    <!-- Load hardware interface -->
    <node ns="left_robot" name="ur_hardware_interface" pkg="ur_robot_driver"
      type="ur_robot_driver_node"
      output="screen" launch-prefix="$(arg launch_prefix)" required="true">
      <param name="robot_ip" type="str" value="$(arg left_robot_ip)" />
      <param name="reverse_ip" value="$(arg left_reverse_ip)" />
      <param name="reverse_port" type="int" value="$(arg left_reverse_port)" />
      <param name="script_sender_port" type="int" value="$(arg left_script_sender_port)" />
      <param name="trajectory_port" value="$(arg left_trajectory_port)" />
      <param name="script_command_port" value="$(arg left_script_command_port)" />

      <rosparam command="load" file="$(arg left_kinematics_config)" />
      <param name="script_file" value="$(arg urscript_file)" />
      <param name="output_recipe_file" value="$(arg rtde_output_recipe_file)" />
      <param name="input_recipe_file" value="$(arg rtde_input_recipe_file)" />
      <param name="headless_mode" value="$(arg headless_mode)" />
      <param name="tf_prefix" value="$(arg left_tf_prefix)" />
      <param name="use_tool_communication" value="$(arg left_use_tool_communication)" />
      <!--<param
    name="reverse_port" type="int" value="$(arg left_reverse_port)" />-->
      <param name="tool_voltage" value="$(arg left_tool_voltage)" />
      <param name="tool_parity" value="$(arg left_tool_parity)" />
      <param name="tool_baud_rate" value="$(arg left_tool_baud_rate)" />
      <param name="tool_stop_bits" value="$(arg left_tool_stop_bits)" />
      <param name="tool_rx_idle_chars" value="$(arg left_tool_rx_idle_chars)" />
      <param name="tool_tx_idle_chars" value="$(arg left_tool_tx_idle_chars)" />
      <param name="servoj_gain" value="$(arg servoj_gain)" />
      <param name="servoj_lookahead_time" value="$(arg servoj_lookahead_time)" />

      <!-- 将话题转移到joint_states -->
      <remap from="/left_robot/joint_states" to="/joint_states" />
      <!-- 将ur5e的力矩话题转移至/left_robot/wrench -->
      <remap from="/wrench" to="/left_robot/wrench" />
    </node>
    <!-- Starts socat to bridge the robot's tool communication interface to a local tty device -->
    <node if="$(arg left_use_tool_communication)" name="left_ur_tool_communication_bridge"
      pkg="ur_robot_driver"
      type="tool_communication" respawn="false" output="screen">
      <param name="robot_ip" value="$(arg left_robot_ip)" />
      <param name="reverse_ip" value="$(arg left_reverse_ip)" />
      <param name="reverse_port" type="int" value="$(arg left_reverse_port)" />
      <param name="script_sender_port" type="int" value="$(arg left_script_sender_port)" />
      <param name="device_name" value="$(arg left_tool_device_name)" />
      <param name="tcp_port" value="$(arg tool_tcp_port)" />
    </node>
    <!-- Load controller settings -->
    <rosparam file="$(arg left_controller_config_file)" command="load" />

  </group>

  <!-- spawn controller manager -->
  <node ns="right_robot" name="ros_control_controller_spawner" pkg="controller_manager"
    type="spawner"
    respawn="false"
    output="screen" args="$(arg controllers)" />

  <!-- load other controller -->
  <node ns="right_robot" name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    respawn="false"
    output="screen" args="--stopped $(arg stopped_controllers)" />

  <node ns="right_robot" name="controller_stopper" pkg="controller_stopper" type="node"
    respawn="false"
    output="screen">
    <remap from="robot_running" to="ur_hardware_interface/robot_program_running" />
    <rosparam param="consistent_controllers">
      - "joint_state_controller"
      - "speed_scaling_state_controller"
      - "force_torque_sensor_controller"
      - "robot_status_controller"
    </rosparam>
  </node>

  <!-- Make sure to start this in the namespace of the hardware interface -->
  <node ns="right_robot/ur_hardware_interface" name="ur_robot_state_helper" pkg="ur_robot_driver"
    type="robot_state_helper" respawn="false" output="screen">
  </node>


  <group if="$(arg dual_arm_flag)">
    <!-- spawn controller manager -->
    <node ns="left_robot" name="ros_control_controller_spawner" pkg="controller_manager"
      type="spawner"
      respawn="false"
      output="screen" args="$(arg controllers)" />

    <!-- load other controller -->
    <node ns="left_robot" name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
      respawn="false"
      output="screen" args="--stopped $(arg stopped_controllers)" />

    <node ns="left_robot" name="controller_stopper" pkg="controller_stopper" type="node"
      respawn="false"
      output="screen">
      <remap from="robot_running" to="ur_hardware_interface/robot_program_running" />
      <rosparam param="consistent_controllers">
        - "joint_state_controller"
        - "speed_scaling_state_controller"
        - "force_torque_sensor_controller"
        - "robot_status_controller"
      </rosparam>
    </node>

    <!-- Make sure to start this in the namespace of the hardware interface -->
    <node ns="left_robot/ur_hardware_interface" name="ur_robot_state_helper" pkg="ur_robot_driver"
      type="robot_state_helper" respawn="false" output="screen">
    </node>

  </group>
</launch>